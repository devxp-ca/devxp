import {Autocomplete, Grid, TextField} from "@mui/material";
import React from "react";
import LabelledCheckboxInput from "../labelledInputs/LabelledCheckboxInput";
import LabelledMultiInput from "../labelledInputs/LabelledMultiSelect";
import LabelledNumberInput from "../labelledInputs/LabelledNumberInput";
import LabelledTextInput from "../labelledInputs/LabelledTextInput";
import Resource, {ResourceState} from "./Resource";
import {CONFIG} from "../../config";
import axios from "axios";

interface IProps {
	runtime?: string;
	entry_point?: string;
	source_dir?: string;
	trigger_http?: boolean;
	memory?: number;
	repo?: string;
}
interface IState extends ResourceState {
	runtime: string;
	entry_point: string;
	source_dir: string;
	trigger_http: boolean;
	memory: number;
	files: string[];
}
export default class GoogleFunction extends Resource<IProps, IState> {
	static defaultProps = {
		...Resource.defaultProps,

		//Type of resource for labels
		resource: "Function",

		//Keys of IState, hacky I know
		data: [
			"runtime",
			"entry_point",
			"source_dir",
			"trigger_http",
			"memory"
		],

		//For autogenerated random IDs
		randomPrefix: "Function-",

		//The "type" to send to the backend
		resourceType: "googleFunc",

		disableIam: true,
		autoIam: false
	};

	constructor(props: IProps) {
		super(props);

		//Lmao this is so bad practice
		this.state = {
			...this.state,
			runtime: this.props.runtime ?? "",
			entry_point: this.props.entry_point ?? "main",
			source_dir: this.props.source_dir ?? "./",
			trigger_http: this.props.trigger_http ?? false,
			memory: this.props.memory ?? 128,
			files: ["./"]
		};
	}

	componentDidMount() {
		axios
			.get(
				`${CONFIG.BACKEND_URL}${
					CONFIG.REPO_FILES_PATH
				}?repo=${encodeURIComponent(this.props.repo ?? "")}`
			)
			.then(resp => {
				this.setState({
					files: [
						"./",
						...(resp.data.files as string[]).filter(file =>
							file.match(/^([^\/]*\/[^\/]*\/)*[^.]+$/)
						)
					]
				});
			})
			.catch(console.error);
	}

	render() {
		return (
			<Grid
				sx={{
					padding: "5px",
					gridGap: "15px",
					display: "flex",
					flexDirection: "column",
					...(this.state.valid
						? {}
						: {
								border: "2px solid red",
								borderRadius: "10px"
						  })
				}}>
				<Grid
					sx={{
						display: "flex",
						flexDirection: "row",
						alignItems: "center",
						justifyContent: "space-evenly",
						"& > div": {
							width: "100%"
						},
						"& > div:nth-of-type(2)": {
							marginTop: "32px"
						}
					}}>
					<LabelledMultiInput
						text="Runtime"
						description={
							<div>
								<p>
									This sets up an environment for the
									programming language your function is
									written in.
								</p>
								<a
									href="https://github.com/devxp-ca/devxp/wiki/Tool-Manager-Configuration#google-functions"
									target="_blank">
									Learn more.
								</a>
							</div>
						}
						options={[
							{
								label: "NodeJS 16",
								key: "nodejs16"
							},
							{
								label: "Java 17",
								key: "java17"
							},
							{
								label: "Python 3.9",
								key: "python39"
							},
							{
								label: "GO 1.16",
								key: "go116"
							},
							{
								label: "Ruby 3.0",
								key: "ruby30"
							},
							{
								label: "PHP 7.4",
								key: "php74"
							},
							{
								label: ".NET Core 3",
								key: "dotnet3"
							}
						]}
						onChange={runtime => this.setState({runtime})}
						initial={this.state.runtime}
					/>

					<LabelledCheckboxInput
						initial={this.state.trigger_http}
						text="HTTP"
						description={
							<div>
								<p>
									Is this function triggered by HTTP requests?
								</p>
								<a
									href="https://github.com/devxp-ca/devxp/wiki/Tool-Manager-Configuration#google-functions"
									target="_blank">
									Learn more.
								</a>
							</div>
						}
						onChange={(trigger_http: boolean) =>
							this.setState({trigger_http})
						}
					/>

					<Autocomplete
						freeSolo={true}
						sx={{ml: 1, width: "300px"}}
						disableClearable={true}
						options={this.state.files}
						renderInput={(params: any) => (
							<TextField
								{...params}
								label="Source Directory"
								variant="outlined"
							/>
						)}
						onChange={(_event: any, source_dir: string) => {
							this.setState({
								source_dir
							});
						}}
					/>

					<LabelledTextInput
						pattern="..*"
						text="Exported Entry Point"
						description={
							<div>
								<p>
									The name of the exported function within the
									source file (e.g. main).
								</p>
								<a
									href="https://github.com/devxp-ca/devxp/wiki/Tool-Manager-Configuration#google-functions"
									target="_blank">
									Learn more.
								</a>
							</div>
						}
						initial={this.state.entry_point}
						onChange={entry_point => {
							this.setState({
								entry_point
							});
						}}
					/>
					<LabelledNumberInput
						text="Memory"
						description={
							<div>
								<p>
									Maximum memory given to the function in
									Megabits (Mbs).
								</p>
								<a
									href="https://github.com/devxp-ca/devxp/wiki/Tool-Manager-Configuration#google-functions"
									target="_blank">
									Learn more.
								</a>
							</div>
						}
						initial={this.state.memory}
						onChange={memory => {
							this.setState({
								memory
							});
						}}
					/>
				</Grid>
				{super.render()}
			</Grid>
		);
	}
}
