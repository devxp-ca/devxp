import {Grid} from "@mui/material";
import React from "react";
import LabelledCheckboxInput from "../labelledInputs/LabelledCheckboxInput";
import LabelledMultiInput from "../labelledInputs/LabelledMultiSelect";
import LabelledNumberInput from "../labelledInputs/LabelledNumberInput";
import LabelledTextInput from "../labelledInputs/LabelledTextInput";
import Resource, {ResourceState} from "./Resource";

interface IProps {
	runtime?: string;
	entry_point?: string;
	source_dir?: string;
	trigger_http?: boolean;
	memory?: number;
}
interface IState extends ResourceState {
	runtime: string;
	entry_point: string;
	source_dir: string;
	trigger_http: boolean;
	memory: number;
}
export default class GoogleFunction extends Resource<IProps, IState> {
	static defaultProps = {
		...Resource.defaultProps,

		//Type of resource for labels
		resource: "Function",

		//Keys of IState, hacky I know
		data: [
			"runtime",
			"entry_point",
			"source_dir",
			"trigger_http",
			"memory"
		],

		//For autogenerated random IDs
		randomPrefix: "Function-",

		//The "type" to send to the backend
		resourceType: "googleFunc",

		disableIam: true,
		autoIam: false
	};

	constructor(props: IProps) {
		super(props);

		//Lmao this is so bad practice
		this.state = {
			...this.state,
			runtime: this.props.runtime ?? "",
			entry_point: this.props.entry_point ?? "main",
			source_dir: this.props.source_dir ?? "./",
			trigger_http: this.props.trigger_http ?? false,
			memory: this.props.memory ?? 128
		};
	}

	render() {
		return (
			<Grid
				sx={{
					padding: "5px",
					gridGap: "15px",
					display: "flex",
					flexDirection: "column",
					...(this.state.valid
						? {}
						: {
								border: "2px solid red",
								borderRadius: "10px"
						  })
				}}>
				<Grid
					sx={{
						display: "flex",
						flexDirection: "row",
						alignItems: "center",
						justifyContent: "space-evenly",
						"& > div": {
							width: "100%"
						},
						"& > div:nth-of-type(2)": {
							marginTop: "32px"
						}
					}}>
					<LabelledMultiInput
						text="Runtime"
						description="Choose the type of runtime you want this function to use"
						options={[
							{
								label: "NodeJS 16",
								key: "nodejs16"
							},
							{
								label: "Java 17",
								key: "java17"
							},
							{
								label: "Python 3.9",
								key: "python39"
							},
							{
								label: "GO 1.16",
								key: "go116"
							},
							{
								label: "Ruby 3.0",
								key: "ruby30"
							},
							{
								label: "PHP 7.4",
								key: "php74"
							},
							{
								label: ".NET Core 3",
								key: "dotnet3"
							}
						]}
						onChange={runtime => this.setState({runtime})}
						initial={this.state.runtime}
					/>

					<LabelledCheckboxInput
						initial={this.state.trigger_http}
						text="HTTP"
						description="Is this function triggered by HTTP requests"
						onChange={(trigger_http: boolean) =>
							this.setState({trigger_http})
						}
					/>
					<LabelledTextInput
						pattern="^\/?([a-zA-Z0-9_\-\.]+\/?)*$"
						text="Source Directory"
						description="Absolute path to function source directory within repo"
						initial={this.state.source_dir}
						onChange={source_dir => {
							this.setState({
								source_dir
							});
						}}
					/>

					<LabelledTextInput
						pattern="..*"
						text="Exported entry point method"
						description="Exported function (within source file) to invoke"
						initial={this.state.entry_point}
						onChange={entry_point => {
							this.setState({
								entry_point
							});
						}}
					/>
					<LabelledNumberInput
						text="Memory"
						description="Maxmimum memory given to function (mbs)"
						initial={this.state.memory}
						onChange={memory => {
							this.setState({
								memory
							});
						}}
					/>
				</Grid>
				{super.render()}
			</Grid>
		);
	}
}
