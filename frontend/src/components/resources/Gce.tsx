import Grid from "@mui/material/Grid";
import React from "react";
import LabelledMultiInput from "../labelledInputs/LabelledMultiSelect";
import Resource, {ResourceState} from "./Resource";

interface IProps {
	disk_image?: string;
	machine_type?: string;
}
interface IState extends ResourceState {
	disk_image: string;
	machine_type: string;
}
export default class Gce extends Resource<IProps, IState> {
	static defaultProps = {
		...Resource.defaultProps,

		//Keys of IState, hacky I know
		data: ["disk_image", "machine_type"],

		//Type of resource for labels
		resource: "Virtual Machine",

		//For autogenerated random IDs
		randomPrefix: "gce-",

		//The "type" to send to the backend
		resourceType: "gce",

		disableIam: true,
		autoIam: false
	};

	constructor(props: IProps) {
		super(props);

		//Lmao this is so bad practice
		this.state = {
			...this.state,
			disk_image: this.props.disk_image ?? "",
			machine_type: this.props.machine_type ?? ""
		};
	}

	populateDefault() {
		super.populateDefault();
		this.state = {
			...this.state,
			disk_image: "ubuntu-2004-focal-v20220204",
			machine_type: "f1-micro"
		};
	}

	render() {
		return (
			<Grid
				sx={{
					gridGap: "15px",
					padding: "5px",
					display: "flex",
					flexDirection: "column",
					...(this.state.valid
						? {}
						: {
								border: "2px solid red",
								borderRadius: "10px"
						  })
				}}>
				<LabelledMultiInput
					text="OS"
					description="Choose the type of operating system you want this server to run."
					options={[
						{
							label: "Ubuntu Server 20.04 LTS 64-bit x86",
							key: "ubuntu-2004-focal-v20220204"
						},
						{label: "CentOS 8", key: "centos-stream-8-v20220128"},
						{
							label: "Fedora 35",
							key: "fedora-coreos-35-20220116-3-0-gcp-x86-64"
						},
						{
							label: "Microsoft Windows Server 2019",
							key: "windows-server-2019-dc-v20220210"
						}
					]}
					onChange={disk_image => this.setState({disk_image})}
					initial={this.state.disk_image}
				/>

				<LabelledMultiInput
					text="Hardware"
					description={
						<div>
							<p>
								Choose the computing power you want this server
								to have.
							</p>
							<a
								href="https://github.com/devxp-ca/devxp/wiki/Tool-Manager-Configuration#gce"
								target="_blank"
								rel="noreferrer">
								Learn more.
							</a>
						</div>
					}
					options={[
						{
							label: "Micro [0.2 vCPU, 0.6 GB RAM]",
							key: "f1-micro"
						},
						{
							label: "Standard [1 vCPU, 3.75 GB RAM]",
							key: "n1-standard-1"
						},
						{
							label: "Large [2 vCPUs, 8 GB RAM]",
							key: "e2-standard-2"
						},
						{
							label: "Extra Large [8 vCPUs, 32 GB RAM]",
							key: "e2-standard-8"
						}
					]}
					onChange={machine_type => this.setState({machine_type})}
					initial={this.state.machine_type}
				/>

				{super.render()}
			</Grid>
		);
	}
}
