import Grid from "@mui/material/Grid";
import React from "react";
import LabelledMultiInput from "../labelledInputs/LabelledMultiSelect";
import LabelledRadioInput from "../labelledInputs/LabelledRadioSelect";
import Resource, {ResourceState} from "./Resource";

interface IProps {
	ami?: string;
	instance_type?: string;
}
interface IState extends ResourceState {
	ami: string;
	instance_type: string;
}
export default class Ec2 extends Resource<IProps, IState> {
	static defaultProps = {
		...Resource.defaultProps,

		//Keys of IState, hacky I know
		data: ["ami", "instance_type"],

		//Type of resource for labels
		resource: "Virtual Machine",

		//For autogenerated random IDs
		randomPrefix: "Instance-",

		//The "type" to send to the backend
		resourceType: "ec2"
	};

	constructor(props: IProps) {
		super(props);

		//Lmao this is so bad practice
		this.state = {
			...this.state,
			ami: this.props.ami ?? "",
			instance_type: this.props.instance_type ?? ""
		};
	}

	isValid() {
		return (
			super.isValid() &&
			(this.state.ami !== "ami-0faefa03f7ddcd657" ||
				this.state.instance_type === "mac1.metal")
		);
	}

	render() {
		return (
			<Grid
				sx={{
					padding: 2,
					gridGap: "15px",
					display: "flex",
					flexDirection: "column",
					width: "100%",
					...(this.state.valid
						? {}
						: {
								border: "2px solid red",
								borderRadius: "10px"
						  })
				}}>
				<LabelledMultiInput
					text="OS"
					description="Choose the type of operating system you want this server to run."
					options={[
						{
							label: "Ubuntu Server 20.04 LTS 64-bit x86",
							key: "AUTO_UBUNTU"
						},
						{label: "Amazon Linux 2 AMI (HVM)", key: "AUTO_AMAZON"},
						{
							label: "MacOS Monterey 12.2",
							key: "ami-0faefa03f7ddcd657"
						},
						{
							label: "Microsoft Windows Server 2022",
							key: "AUTO_WINDOWS"
						}
					]}
					onChange={ami => this.setState({ami})}
					initial={this.state.ami}
				/>
				<LabelledMultiInput
					text="Hardware"
					description={
						<div>
							<p>
								Choose the computing power you want this server
								to have.
							</p>
							<p>
								Note: When MacOS is the chosen OS, there is only
								the Mac Hardware option. See details about it{" "}
								<a
									href="https://aws.amazon.com/ec2/instance-types/mac/"
									target="_blank">
									here
								</a>
								, and be aware that there is a special pricing
								plan that charges a minimum of 24 hours usage.
							</p>
							<a
								href="https://github.com/devxp-ca/devxp/wiki/Tool-Manager-Configuration#ec2"
								target="_blank">
								Learn more.
							</a>
						</div>
					}
					options={
						this.state.ami === "ami-0faefa03f7ddcd657"
							? [
									{
										label: "MAC Hardware [12 vCPUs, 32 GB RAM]",
										key: "mac1.metal"
									}
							  ]
							: [
									{
										label: "Micro [1 vCPU, 1GB RAM]",
										key: "t2.micro"
									},
									{
										label: "Small [1 vCPU, 2GB RAM]",
										key: "t2.small"
									},
									{
										label: "Medium [2 vCPUs, 4GB RAM]",
										key: "t2.medium"
									},
									{
										label: "Large [2 vCPUs, 8GB RAM]",
										key: "t2.large"
									},
									{
										label: "Extra Large [4 vCPUs, 16GB RAM]",
										key: "t2.xlarge"
									},
									{
										label: "Compute Opmized [8 vCPUs, 15 GB RAM, 160 GB SSD]",
										key: "c3.2xlarge"
									},
									{
										label: "Compute Optimized Extra Large [32 vCPUs, 60 GB RAM, 640 GB SSD",
										key: "c3.8xlarge"
									},
									{
										label: "Storage Optimized [8 vCPUs, 61 GB RAM, 6 x 2000 GB HDD]",
										key: "d2.2xlarge"
									},
									{
										label: "Storage Optimized Extra Large [36 vCPUs, 244 GB RAM, 24 x 2000 GB HDD]",
										key: "d2.8xlarge"
									},
									{
										label: "Memory Optimized [8 vCPUs, 61 GB RAM, 1 x 160 GB SSD]",
										key: "r3.2xlarge"
									},
									{
										label: "Memory Optimized Extra Large [32 vCPUs, 244 GB RAM, 2 x 320 GB SSD]",
										key: "r3.8xlarge"
									}
							  ]
					}
					onChange={instance_type => this.setState({instance_type})}
					initial={this.state.instance_type}
				/>

				{super.render()}
			</Grid>
		);
	}
}
