import {Grid} from "@mui/material";
import React from "react";
import LabelledTextInput from "../labelledInputs/LabelledTextInput";
import Resource, {ResourceState} from "./Resource";
import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import Link from "@mui/material/Link";

interface IProps {
	image?: string;
	env?: string[];
}
interface IState extends ResourceState {
	env: string[];
	image: string;
}
export default class CloudRun extends Resource<IProps, IState> {
	static defaultProps = {
		...Resource.defaultProps,

		//Type of resource for labels
		resource: "Serverless (Docker)",

		//Keys of IState, hacky I know
		data: ["env", "image"],

		//For autogenerated random IDs
		randomPrefix: "cloud-run-",

		//The "type" to send to the backend
		resourceType: "cloudRun",

		disableIam: true,
		autoIam: false
	};

	constructor(props: IProps) {
		super(props);

		//Lmao this is so bad practice
		this.state = {
			...this.state,
			image: this.props.image ?? "",
			env: this.props.env ?? []
		};
	}

	populateDefault() {
		super.populateDefault();
		this.state = {
			...this.state,
			image: "gcr.io/cloudrun/hello"
		};
	}

	isValid() {
		const hash: any = {};
		return (
			super.isValid() &&
			this.state.env.reduce((acc, cur) => {
				if (hash[cur]) {
					return false;
				}
				hash[cur] = true;
				return cur.length > 0 && acc;
			}, this.state.env.length > 0)
		);
	}

	render() {
		return (
			<Grid
				sx={{
					padding: "5px",
					gridGap: "15px",
					display: "flex",
					flexDirection: "column",
					...(this.state.valid
						? {}
						: {
								border: "2px solid red",
								borderRadius: "10px"
						  })
				}}>
				<LabelledTextInput
					text="Docker Image"
					initial={this.state.image}
					description={
						<div>
							<p>The URL for your container image.</p>
							<Link
								href="https://github.com/devxp-ca/devxp/wiki/Tool-Manager-Configuration#google-cloud-run"
								target="_blank"
								rel="noreferrer">
								Learn more.
							</Link>
						</div>
					}
					onChange={(image: string) => this.setState({image})}
				/>

				{this.state.env.length > 0 ? (
					this.state.env.map((env, i) => (
						<Grid
							key={`cloudRun-${this.state.id}-${i}`}
							sx={{
								"& > div": {
									width: "30%"
								}
							}}
							container
							direction="row">
							<LabelledTextInput
								direction="row"
								text="Variable Name"
								description={
									<div>
										<p>
											A variable name that should be set
											at runtime, such as a secret.
										</p>
										<p>
											You can create a terraform.tfvars
											file or manually enter the variable
											value when prompted while running
											Terraform apply.
										</p>
										<p>
											The variable name can include
											uppercase and lowercase letters as
											well as underscores.
										</p>
										<Link
											href="https://github.com/devxp-ca/devxp/wiki/Tool-Manager-Configuration#google-cloud-run"
											target="_blank"
											rel="noreferrer">
											Learn more.
										</Link>
									</div>
								}
								initial={env}
								pattern="^[a-zA-Z_]+$"
								onChange={name => {
									this.setState({
										env: this.state.env.map(
											(env0: string, j) =>
												i === j ? name : env0
										)
									});
								}}
							/>
							<Button
								variant="contained"
								color="error"
								onClick={() => {
									this.setState({
										env: this.state.env.filter(
											(_env, ii) => i !== ii
										)
									});
								}}>
								Delete
							</Button>
						</Grid>
					))
				) : (
					<Typography>No ENV Variables Set</Typography>
				)}
				<Button
					variant="contained"
					color="success"
					onClick={() => {
						this.setState({
							env: [...this.state.env, ""]
						});
					}}>
					Add ENV Variable
				</Button>

				{super.render()}
			</Grid>
		);
	}
}
